name: Build and Deploy to AKS

on:
  push:
    branches:
      - sprint

# Environment variables available to all jobs and steps in this workflow
env:
  IMAGE: magento-connector

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Login to Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_KEY }}

      # Configure docker to use the azure command-line tool as a credential helper
      - run: |-
          az acr login --name aftersale
      - run: |-
          az aks get-credentials --resource-group aftersale --name spr-aftersale

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "aftersale.azurecr.io/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Azure Container Registry
      - name: Publish
        run: |-
          docker push "aftersale.azurecr.io/$IMAGE:$GITHUB_SHA"

      # Tag image as latest as branch is sprint
      - name: Tag sprint
        run: |-
          docker tag aftersale.azurecr.io/$IMAGE:$GITHUB_SHA aftersale.azurecr.io/$IMAGE:sprint
          docker push aftersale.azurecr.io/$IMAGE:sprint

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
          mkdir $GITHUB_WORKSPACE/bin
          mv kustomize $GITHUB_WORKSPACE/bin/
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      # Deploy the Docker image to the AKS cluster
      - name: Deploy
        run: |-
          cd k8s/overlays/sprint
          kustomize edit set image aftersale.azurecr.io/IMAGE:TAG=aftersale.azurecr.io/$IMAGE:$GITHUB_SHA
          kustomize build . | kubectl apply -f -
          kubectl -n aftersale rollout status deployment/$IMAGE
          kubectl -n aftersale get services -o wide
